
@article{2021-09-1-razaSOK,
  type = {Systemization of {{Knowledge}} ({{SoK}})},
  title = {Function-as-a-{{Service}}: {{From An Application Developer}}'s {{Perspective}}},
  author = {Raza, Ali and Matta, Ibrahim and Akhtar, Nabeel and Kalavri, Vasiliki and Isahagian, Vatche},
  year = {2021},
  month = sep,
  journal = {Journal of Systems Research},
  volume = {1},
  number = {1},
  issn = {2770-5501},
  doi = {10.5070/SR31154815},
  url = {https://escholarship.org/uc/item/1wg7h0qf},
  urldate = {2021-09-21},
  abstract = {A survey paper on the state of serverless computing from a developer's perspective.},
  area = {Serverless Systems},
  langid = {english},
  review_url = {https://openreview.net/forum?id=VdWaMgaTKtX}
}

@article{2021-09-2-whittakerSOK,
  type = {Systemization of {{Knowledge}} ({{SoK}})},
  title = {A {{Generalized Multi-Leader State Machine Replication Tutorial}}},
  author = {Whittaker, Michael and Giridharan, Neil and Szekeres, Adriana and Hellerstein, Joseph and Stoica, Ion},
  year = {2021},
  month = sep,
  journal = {Journal of Systems Research},
  volume = {1},
  number = {1},
  issn = {2770-5501},
  doi = {10.5070/SR31154817},
  url = {https://escholarship.org/uc/item/9w79h2jg},
  urldate = {2021-09-21},
  abstract = {Everything you always wanted to know about generalized multi-leader state machine replication protocols but were afraid to ask.},
  area = {Distributed Consensus},
  langid = {english},
  review_url = {https://openreview.net/forum?id=4Xo8nv5DNS}
}

@article{2021-09-3-whittakerSolution,
  type = {Solution},
  title = {Matchmaker {{Paxos}}: {{A Reconfigurable Consensus Protocol}}},
  author = {Whittaker, Michael and Giridharan, Neil and Szekeres, Adriana and Hellerstein, Joseph and Howard, Heidi and Nawab, Faisal and Stoica, Ion},
  year = {2021},
  month = sep,
  journal = {Journal of Systems Research},
  volume = {1},
  number = {1},
  issn = {2770-5501},
  doi = {10.5070/SR31154842},
  url = {https://escholarship.org/uc/item/8wk3343k},
  urldate = {2021-09-21},
  abstract = {Donut Paxos is a reconfigurable consensus protocol that leverages ideas from Vertical Paxos, DPaxos, and Flexible Paxos.},
  area = {Distributed Consensus},
  artifacts_url = {https://github.com/mwhittaker/frankenpaxos/},
  langid = {english},
  review_url = {https://openreview.net/forum?id=bXe1agiq9LN}
}

@article{2021-11-4-jacobTool,
  type = {Tools/{{Benchmark}}},
  title = {Designing {{Replicable Networking Experiments With Triscale}}},
  author = {Jacob, Romain and Zimmerling, Marco and Boano, Carlo Alberto and Vanbever, Laurent and Thiele, Lothar},
  year = {2021},
  month = nov,
  journal = {Journal of Systems Research},
  volume = {1},
  number = {1},
  issn = {2770-5501},
  doi = {10.5070/SR31155408},
  url = {https://escholarship.org/uc/item/63n4s9w2},
  urldate = {2021-11-15},
  abstract = {When designing their performance evaluations, networking researchers often encounter questions such as: How long should a run be? How many runs to perform? How to account for the variability across multiple runs? What statistical methods should be used to analyze the data? Despite their best intentions, researchers often answer these questions differently, thus impairing the replicability of their evaluations and the confidence in their results. In this paper, we propose a concrete methodology for the design and analysis of performance evaluations. Our approach hierarchically partitions the performance evaluation into three timescales, following the principle of separation of concerns. The idea is to understand, for each timescale, the temporal characteristics of variability sources, and then to apply rigorous statistical methods to derive performance results with quantifiable confidence in spite of the inherent variability. We implement this methodology in a software framework called TriScale. For each performance metric, TriScale computes a variability score that estimates, with a given confidence, how similar the results would be if the evaluation were replicated; in other words, TriScale quantifies the replicability of evaluations. We showcase the practicality and usefulness of TriScale on four different case studies demonstrating that TriScale helps to generalize and strengthen published results. Improving the standards of replicability in networking is a complex challenge. This paper is an important contribution to this endeavor; it provides networking researchers with a rational and concrete experimental methodology rooted in sound statistical foundations. The first of its kind.},
  area = {Networking},
  artifacts_url = {https://github.com/romain-jacob/triscale},
  langid = {english},
  review_url = {https://openreview.net/forum?id=c1LNi8CTPy6}
}

@article{2022-03-07-zakiSolution,
  type = {Solution},
  title = {{{ALCC}}: {{Migrating Congestion Control To The Application Layer In Cellular Networks}}},
  shorttitle = {{{ALCC}}},
  author = {Zaki, Yasir and Asim, Rohail and Khan, Muhammad and Iyer, Shiva and Ahmad, Talal and Potsch, Thomas and Subramanian, Lakshmi},
  year = {2022},
  month = mar,
  journal = {Journal of Systems Research},
  volume = {2},
  number = {1},
  issn = {2770-5501},
  doi = {10.5070/SR32156656},
  url = {https://escholarship.org/uc/item/3989w2s4},
  urldate = {2022-03-07},
  abstract = {TCP is known to perform poorly in cellular network environ- ments. Yet, most mobile applications are explicitly built on the conventional TCP stack or implicitly leverage TCP tun- nels to various cellular middleboxes, including performance- enhancing proxies, application-specific edge proxies, VPN proxies and NAT boxes. Despite significant advances in the design of new congestion control (CC) protocols for cellular networks, deploying these protocols without bypassing the underlying TCP tunnels has remained a challenging propo- sition. This paper proposes the design of a new Application Layer Congestion Control (ALCC) framework that allows any new CC protocol to be implemented easily at the application layer, within or above an application-layer protocol that sits atop a legacy TCP stack. It drives it to deliver approximately the same as the native performance. The ALCC socket sits on top of a traditional TCP socket. Still, it can leverage the large congestion windows opened by TCP connections to carefully execute an application-level CC within the window bounds of the underlying TCP connection. This paper demonstrates how ALCC can be applied to three well-known cellular CC pro- tocols: Verus, Copa, and Sprout. For these protocols, ALCC can achieve comparable throughput and delay characteristics (within 3-10\%) as the native protocols at the application layer across different networks and traffic conditions. ALCC al- lows a server-side implementation of these protocols with no client modifications and with zero bytes overhead. The ALCC framework can be easily integrated with off-the-shelf applications such as file transfers and video streaming.},
  area = {Networking},
  artifacts_url = {https://github.com/comnetsAD/ALCC},
  langid = {english},
  review_url = {https://openreview.net/forum?id=moVPhXtxQo7}
}

@article{2022-06-22-seshagiriSoK,
  type = {{{SoK}}},
  ids = {seshagiri2022SOK},
  title = {Identifying {{Mismatches Between Microservice Testbeds}} and {{Industrial Perceptions}} of {{Microservices}}},
  author = {Seshagiri, Vishwanath and Huye, Darby and Liu, Lan and Wildani, Avani and Sambasivan, Raja R.},
  year = {2022},
  month = jun,
  journal = {Journal of Systems Research},
  volume = {2},
  number = {1},
  issn = {2770-5501},
  doi = {10.5070/SR32157839},
  url = {https://escholarship.org/uc/item/5v3489k8},
  urldate = {2022-06-22},
  abstract = {Industrial microservice architectures vary so wildly in their characteristics, such as size or communication method, that comparing systems is difficult and often leads to confusion and misinterpretation. In contrast, the academic testbeds used to conduct microservices research employ a very constrained set of design choices. This lack of systemization in these key design choices when developing microservice architectures has led to uncertainty over how to use experiments from testbeds to inform practical deployments and indeed whether this should be done at all. We conduct semi-structured interviews with industry participants to understand the representativeness of existing testbeds' design choices. Surprising results included the presence of cycles in industry deployments, as well as a lack of clarity about the presence of hierarchies. We then systematize the possible design choices we learned about from the interviews, and identify important mismatches between our interview results and testbeds' designs that will inform future, more representative testbeds.},
  area = {Serverless},
  langid = {english},
  review_url = {https://openreview.net/forum?id=SzgbRfqFRY}
}

@article{2022-07-21-licciardelloSolution,
  type = {Solution},
  ids = {licciardello2022Solution},
  title = {Prepare Your Video for Streaming with {{Segue}}},
  author = {Licciardello, Melissa and Humbel, Lukas and Rohr, Fabian and Gr{\"u}ner, Maximilian and Singla, Ankit},
  year = {2022},
  month = jul,
  journal = {Journal of Systems Research},
  volume = {2},
  number = {1},
  doi = {10.5070/SR32158113},
  url = {https://escholarship.org/uc/item/8m39f25q},
  urldate = {2022-07-21},
  abstract = {We identify new opportunities in video streaming, involving the joint consideration of offline video chunking and on-line rate adaptation. Due to a video's complexity varyingover time, certain parts are more likely to cause performanceimpairments during playback with a particular rate adaptationalgorithm. To address such an issue, we propose Segue ,which carefully uses variable-length video segments, and augment specific segments with additional bitrate tracks. The keynovelty of our approach is in making such decisions basedon the video's time-varying complexity and the expected rateadaptation behavior over time. We propose and implementseveral methods for such adaptation-aware chunking. Ourresults show that Segue substantially reduces rebufferingand quality fluctuations, while maintaining video quality delivered; Segue improves QoE by 9\% on average, and by 22\%in low-bandwidth conditions. Finally, we view our problemframing as a first step in a new thread on algorithmic anddesign innovation in video streaming, and leave the readerwith several interesting open questions.},
  area = {Networking},
  artifacts_url = {https://github.com/melADTR/Segue},
  langid = {english},
  review_url = {https://openreview.net/forum?id=iUU6Qr3eQd6}
}


